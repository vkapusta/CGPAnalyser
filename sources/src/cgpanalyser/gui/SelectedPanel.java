/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cgpanalyser.gui;

import cgpanalyser.Evolution;
import cgpanalyser.functions.AA;
import cgpanalyser.gui.draw.DrawChromosome;
import cgpanalyser.gui.draw.DrawChromosomesAll;
import cgpanalyser.gui.draw.DrawGate;
import cgpanalyser.gui.draw.DrawVariables;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import javax.swing.JOptionPane;

/**
 *
 * @author V
 */
public class SelectedPanel extends javax.swing.JPanel {

   private SelectedWindow parent;
   private DrawChromosome[] dChsSelected;
   private final DrawVariables dVars;
   private final SelectedWindow selectedWindow;
   private final Evolution evo;
   private final int paletteChromosomeGap = 50;

   /**
    * Creates new form PanelSelected
    */
   public SelectedPanel() {
      initComponents();
      selectedWindow = null;
      dVars = null;
      evo = null;
   }

   public SelectedPanel(SelectedWindow parent, DrawChromosome[] dChsSelected, DrawVariables dVars, SelectedWindow selectedWindow, Evolution evo) {
      this.parent = parent;
      this.dChsSelected = dChsSelected;
      this.dVars = dVars;
      this.selectedWindow = selectedWindow;
      this.evo = evo;
      initComponents();
   }

   @Override
   public void paint(Graphics g) {
      super.paint(g);

      if (dChsSelected == null)
         return;

      Graphics2D g2 = (Graphics2D) g;

      AA.setAA(g2, true);
      AA.setAAText(g2, true);

      dChsSelected[0].paintComparison(g2, dChsSelected[1]);
      dChsSelected[1].paintComparison(g2, dChsSelected[0]);

      int y = DrawChromosomesAll.computeHeightOfChrom(evo, dVars, false);
      drawPalette(g2, new Point(dChsSelected[0].getStart().x, y + paletteChromosomeGap), 0);
      drawPalette(g2, new Point(dChsSelected[1].getStart().x, y + paletteChromosomeGap), 1);

   }

   private void drawPalette(Graphics2D g2, Point paletteStart, int dChIndex) {
      g2.drawString("0", paletteStart.x, paletteStart.y + 10);
      int x = paletteStart.x + 15;
      int y = paletteStart.y;
      for (Color color : dVars.getColorPalette()) {
         g2.setColor(color);
         g2.setStroke(new BasicStroke(8));
         g2.drawLine(x, y, x, y + 10);
         x += 8;
      }
      g2.setColor(dVars.getNormalColor());

      g2.drawString(Integer.toString(dChsSelected[dChIndex].getMaxHistory()), x + 4, paletteStart.y + 10);
   }

   public void setGatesUnSelected() {
      dChsSelected[0].setGatesUnSelected();
      dChsSelected[1].setGatesUnSelected();
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
    * this method is always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      addMouseWheelListener(new java.awt.event.MouseWheelListener() {
         public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
            SelectedPanel.this.mouseWheelMoved(evt);
         }
      });
      addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            SelectedPanel.this.mouseClicked(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 400, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 300, Short.MAX_VALUE)
      );
   }// </editor-fold>//GEN-END:initComponents

   private void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_mouseWheelMoved
      zoomChroms((double) (dVars.getZoom(false) * 10 + evt.getWheelRotation()));
   }//GEN-LAST:event_mouseWheelMoved

   private void mouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseClicked
      if (!parent.isCheckBoxTTSelected())
         return;

      int chWidth = dChsSelected[0].getWidth();
      int gateIndex = 0;

      //determine which chromosome to scan for gate that was possibly clicked on
      int dChToCheckIndex = 1;
      if (evt.getPoint().x < (chWidth + dVars.getDrawingStart().x))
         dChToCheckIndex = 0;

      try {
         for (DrawGate dGate : dChsSelected[dChToCheckIndex].getListOfDGates()) { //find gate that was clicked on
            if (dGate.contains(evt.getPoint())) {
               String expression = dGate.getdCh().getAndCalculateLogicExpression(gateIndex);
               parent.setExpression(dChToCheckIndex, expression);
               repaint();
               break;
            }
            gateIndex++;
         }
      } catch (NullPointerException e) { //function file not loaded or incorrect
         JOptionPane.showMessageDialog(null, "Function file is not loaded or is incorrect/incoplete.", "Wrong fuction file", JOptionPane.ERROR_MESSAGE);
      }
   }//GEN-LAST:event_mouseClicked

   public void zoomChroms(double zoom) {
      dVars.setZoom(zoom, false);
      selectedWindow.updateDrawChromosomeCoordinates();
      repaint();
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   // End of variables declaration//GEN-END:variables
}
